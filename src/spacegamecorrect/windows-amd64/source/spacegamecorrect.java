/* autogenerated by Processing revision 1307 on 2025-10-22 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class spacegamecorrect extends PApplet {

// Bailey McKeithen | 17 Sep 2025 | SpaceGame

// setup a timer and you start it when you level up then while the timer 
//is running display level up 
Spaceship luckycharms;

ArrayList<rock> rocks = new ArrayList<rock>();
ArrayList<PowerUp> powerUps = new ArrayList<PowerUp>();
ArrayList<Laser> lasers = new ArrayList<Laser>();
ArrayList<Star> stars = new ArrayList<Star>();

Timer rocktimer;
Timer powerUpTimer,levelTimer;

int score, rocksPassed,level;
boolean play = false;



PImage startImage;
PImage endImage;

public void setup() {
  /* size commented out by preprocessor */;
  background(20);
level=1;
  luckycharms = new Spaceship();
  luckycharms.turretCount = 1;

  rocktimer = new Timer(900);
  rocktimer.start();

  powerUpTimer = new Timer(4000);
  powerUpTimer.start();
  
   levelTimer = new Timer(40000);
  levelTimer.start();

  score = 0;
  rocksPassed = 0;
  

  startImage = loadImage("spacegame.png");
  endImage = loadImage("endImage.png");

  // create stars
  for (int i = 0; i < 100; i++) {
    stars.add(new Star());
  }
}

public void draw() {
  if (!play) {
    startScreen();
  } 
  else if (luckycharms.health <= 0 || rocksPassed >= 10) {
    gameOverScreen();
  } 
  else {
    // Main game 
    background(20);

    // Stars
    for (Star s : stars) {
      s.display();
    }
    //levels check
    if (score >= level * 500){
    level++;
    // Make the game harder:
    int newRockTime = max(500, 2000 - level * 200); 
    rocktimer = new Timer(newRockTime);
    }

    // Rocks
    if (rocktimer.isFinished()) {
      rocks.add(new rock());
      rocktimer.start();
    }

    for (int i = rocks.size() - 1; i >= 0; i--) {
      rock r = rocks.get(i);
      r.display();
      r.move();

      if (luckycharms.intersect(r)) {
        rocks.remove(i);
        score += r.diam;
        luckycharms.health -= 10;
      } 
      else if (r.reachedBottom()) {
        rocksPassed++;
        rocks.remove(i);
      }
    }

    if (powerUpTimer.isFinished()) {
      powerUps.add(new PowerUp());
      powerUpTimer.start();
    }
    
    for (int i = 0; i < powerUps.size(); i++) {
      PowerUp p = powerUps.get(i);
      p.display();
      p.move(); 
    
      // Check collision with spaceship
      if (p.intersect(luckycharms)) {
        if (p.type == 'a') {
          luckycharms.laserCount += 10;
        } else if (p.type == 'h') {
          luckycharms.health += 10;
        } else if (p.type == 't') {
          luckycharms.turretCount++;
        }
        powerUps.remove(i);
      } else if (p.reachedBottom()) {
        powerUps.remove(i);
      }
    }
    
  }

    // Lasers
  //Display and move Lasers
  for (int i = 0; i < lasers.size(); i++) {
    Laser laser = lasers.get(i);
    for (int j = 0; j<rocks.size(); j ++) {
      rock r = rocks.get(j);
      if (laser.intersect (r)) {
        lasers.remove(laser);
        score+= r.diam;
        r.diam -= 50;
        if (r.diam<5) {
          rocks.remove(r);
        }
        println("score:" + score);
        println("r.diam:" + r.diam);
        
      }
    }
    laser.display();
    laser.move();
    if (laser.reachedTop()) {
       lasers.remove(laser);
    }
    //println("Lasers;" + lasers.size());
}

     // if (!hit) {
        //laser.display();
        //laser.move();
       // if (laser.reachedTop()) lasers.remove(i);
     // }
   // }

    // Spaceship
    luckycharms.display();
    luckycharms.move(mouseX, mouseY);
    infoPanel();
   //level
fill(255);
textSize(30);
textAlign(RIGHT, TOP);
text("Level: " + level, width - 20, 20);

  }



public void mousePressed() {
  if (!play) {
    play = true;  
    return;
  }
  
  if (luckycharms.turretCount == 1) {
  lasers.add(new Laser(luckycharms.x, luckycharms.y));
  }else if (luckycharms.turretCount == 2) {
    lasers.add(new Laser(luckycharms.x-10, luckycharms.y));
    lasers.add(new Laser(luckycharms.x+10, luckycharms.y));
  }else if (luckycharms.turretCount == 3) {
  lasers.add(new Laser(luckycharms.x, luckycharms.y));
  lasers.add(new Laser(luckycharms.x-10, luckycharms.y));
  lasers.add(new Laser(luckycharms.x+10, luckycharms.y));
  }else{
  lasers.add(new Laser(luckycharms.x, luckycharms.y));
  lasers.add(new Laser(luckycharms.x-10, luckycharms.y));
  lasers.add(new Laser(luckycharms.x+10, luckycharms.y));
  }
  
  luckycharms.laserCount -= 1;
  
}

public void startScreen() {
  background(0, 0, 30);
  imageMode(CENTER);
  image(startImage, width / 2, height / 2, width, height);

  fill(255);
  textAlign(CENTER);
  textSize(50);
  text("SpaceGame", width / 2, 100);
  textSize(30);
  text("Bailey McKeithen", width / 2, 150);
  text("Click to Start", width / 2, 200);
}

public void gameOverScreen() {
  background(0);
  imageMode(CENTER);
  image(endImage, width / 2, height / 2, width, height);

  fill(255, 0, 0);
  textAlign(CENTER);
  textSize(50);
  text("GAME OVER", width / 2, height - 100);
  textSize(30);
  text("Final Score: " + score, width / 2, height - 50);
}

public void infoPanel() {
  rectMode(CENTER);
  fill(127, 127);
  noStroke();
  rect(width / 2, height - 25, width, 50);

  fill(40, 0, 40);
  textSize(30);
  textAlign(LEFT);
  text("Score: " + score, 50, height - 10);
  text("Rocks Passed: " + rocksPassed, 250, height - 10);
  text("Health: " + luckycharms.health, 500, height - 10);
  text("Ammo: " + luckycharms.laserCount, 650, height - 10);
}
class Laser {
  // Member Variables
  int x, y, speed;
  PImage laser;
  

  //Constructor
  Laser(int x, int y) {
    this.x=x;
    this.y=y;
    speed=10;
   
    laser = loadImage("laser1.png");
    
 
    }
    
  



  //Member Methods
  public void display() {
      image(laser,x,y);
      
  }
  

  public void move() {
    y=y-speed;
  }


  public boolean reachedTop() {
    if (y<0-10) {
      return true;
    } else {
      return false;
    }
  }
  public boolean intersect(rock r) {
    float d= dist(x, y, r.x, r.y);
    if (d<30) {
      return true;
    } else {
      return false;
    }
  }
}
class PowerUp {
// Member Variables
int x, y, w, speed;
char type;
PImage power;
int c1;

PowerUp() {
x=PApplet.parseInt (random(width));
y=-100;
w=100;
speed =PApplet.parseInt(random(1,5));

if(random(10)>7) {
  type='a'; //ammo
  c1= color (255, 0, 0);
  power=loadImage("ammo.png");

} else {
  //if (random(10)>5.0) {
  type='h'; //health
  c1=color(0, 255, 0);
  //} else {
  power=loadImage("healthstar.png");
// rock1=loadImage("turret.png");
  //type = 't'; //This is Turret Count
  c1 = color(0,0,255);
}
}
// Member Methods
public void display() {
    imageMode(CENTER);
    imageMode(CENTER);
    power.resize(100, 100);
    image(power, x, y);
  }

public void move() {
y = y + speed;
}


public boolean reachedBottom() {
if (y>height + 100) {
return true;
} else {
return false;
}
}

public boolean intersect(Spaceship s) {
float d = dist(x, y, s.x, s.y);
if (d<50) {
return true;
} else {
return false;
}
}
}
class rock {
  // Member Variables
  int x, y, diam, speed,health;
int initialDiam;
  PImage rock1;

  //Constructor
  rock() {
    x=PApplet.parseInt (random(width));
    y=-100;
    diam=PApplet.parseInt(random(50, 100));
    initialDiam=diam;
    speed =PApplet.parseInt(random(3, 5));
    health=2;
    if (random(10)>6.6f) {
      rock1=loadImage("rock1.png");
    } else if (random(10)>5.0f) {
      rock1=loadImage("rock1.png");
    } else {
      rock1=loadImage("rock1.png");
    }
  }

  //Member Methods
  public void display() {
    imageMode(CENTER);
    //rock1.resize(diam, diam);
    image(rock1, x, y,diam,diam);
  }

  public void move() {
    y=y+speed;
  }


  public boolean reachedBottom() {
    if (y>height+diam/2) {
      return true;
    } else {
      return false;
    }
  }
}
class Spaceship {
// Member Variables
int x,y,w,laserCount, turretCount, health;

//Constructor
Spaceship(){
x=width/2;
y=height/2;
w=100;
health=100;
laserCount=100;
//
}

//Member Methods
public void display(){
  rectMode(CENTER);
// Body
  fill(0, 100, 100);
  stroke(0,0,150);
  strokeWeight(3);
  rect(x, y + 40, 30, 80);
 

  // Wings
  fill(0, 100, 0);
  stroke(0,0,150);
  strokeWeight(2);
  triangle(x - 15, y + 60, x - 30, y + 90, x - 15, y + 80);
  triangle(x + 15, y + 60, x + 30, y + 90, x + 15, y + 80);
 
 //fire
 fill(255,160,0);
 stroke(255,10,0);
  strokeWeight(2);
  triangle(x - 30, y + 110, x - 45, y + 130, x - 30, y + 120);  // left
  triangle(x + 30, y + 110, x + 45, y + 130, x + 30, y + 120);  // right
 
 
  //triangle on top
  fill (0,100,0);
  stroke(0,0,150);
  triangle(x - 10, y - 3, x + 10, y - 3, x, y - 60);
 
 //window
 fill (0,90,150);
 stroke(100);
 ellipse(x,y+10,15,15);
 

  // circle on top
  fill(255);
  stroke(255);
  ellipse(x, y - 60, 8, 8);
}

public void move(int x,int y) {
this.x = x;
this.y = y;
}

public boolean fire(){
if (laserCount>0){
return true;
}else{
  return false;
}
}

public boolean intersect(rock r) {
  float d= dist(x,y,r.x,r.y);
  if(d<50){
    return true;
  }else{
    return false;
  }
}

public boolean intersect(PowerUp r) {
float d= dist(x,y,r.x,r.y);
  if(d<50){
    return true;
  }else{
    return false;
  }
}


}
class Star {
int x, y, w, speed;

Star() {
x = PApplet.parseInt(random(width));
y = PApplet.parseInt(random(height));
w = PApplet.parseInt(random(1, 4));
speed = PApplet.parseInt(random(1, 10));
}

public void display() {
fill(random(225, 255));
ellipse(x, y, w, w);
}

public void move() {
y+=speed;
}

public boolean reachedBottom() {
if (y>height+10) {
return true;
} else {
return false;
}
}
}
//Daniel Shifman

class Timer {

int savedTime; // When Timer started
int totalTime; // How long Timer should last
Timer(int tempTotalTime) {
totalTime = tempTotalTime;
}

// Starting the timer
public void start() {
// When the timer starts it stores the current time in milliseconds.
savedTime = millis();
}

// The function isFinished() returns true if 5,000 ms have passed.
// The work of the timer is farmed out to this method.
public boolean isFinished() {
// Check how much time has passed
int passedTime = millis()- savedTime;
if (passedTime > totalTime) {
return true;
} else {
return false;
}
}
}


  public void settings() { size(800, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "spacegamecorrect" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
